error: null
root:
  main:
    root:
      .cursorrules:
        content: |-
          設定ファイル
          機能:
          - アシスタント設定
          - タスク作成ルール
          - CLIコマンド設定
          - エラー処理ルール
          - Next.js設定
          - Lintルール
            - 変数命名規則
              - 未使用変数は_プレフィックス
              - 一時的な変数は明確な命名
            - アクセシビリティ
              - buttonタグにはtype属性必須
              - キーボード操作対応
            - パフォーマンス
              - 配列のkeyにはインデックス不可
              - useEffectの依存配列は必須
              - 配列のデフォルト値は定数化
            - Next.js固有
              - processはrequireで使用（環境変数は除外）
              - Server Componentの明示
            - コード品質
              - console文は本番環境で禁止
              - 型安全性の確保
              - useMemoによる最適化
            - コーディングスタイル
              - 関数ベースのアプローチを優先
              - クラスの使用は以下の場合のみ許可
                - シングルトン（設定管理等）
                - 複雑な状態管理が必要な場合
                - 外部ライブラリとの統合で必要な場合
              - 純粋関数を優先
              - 副作用の最小化
              - エクスポート規約
                - コンポーネントは原則default export
                - 型定義は named export
                - ユーティリティ関数は named export
                - 定数は named export
              - 設定変更の原則
                - 明示的な指示がある場合のみ変更可能
                - セキュリティに関する変更は例外として許可
                - モデル・パラメータ等は指示なしでは変更禁止
                - 環境変数名の変更は影響範囲を要確認
            - デザイン規約
              - デザイン変更の原則
                - 明示的な指示がある場合のみ変更可能
                - 指示がない場合は既存デザインを維持
              - コンポーネントライブラリの統一
                - @/components/ui/* の使用を優先
                - Tailwindクラスの一貫性を保持
              - レイアウトの一貫性
                - 既存のスペーシング・サイズを踏襲
                - レスポンシブデザインの維持
              - リファクタリング時の注意
                - デザインの変更は明示的な指示がある場合のみ
                - 機能改善やリファクタリング時も既存UIを維持
                - パフォーマンス改善時もデザインの一貫性を優先
          - Tailwind設定
            - カスタムクラス名はtheme.extendで定義
            - アニメーション設定
            - カラー設定
            - 最新記法の使用（opacity等）
        dependency: []
      .gitignore:
        content: |-
          Git除外設定
          機能:
          - node_modules除外
          - ビルドファイル除外
          - 環境変数ファイル除外
          - キャッシュファイル除外
        dependency: []
      .vscode:
        settings.json:
          content: |-
            VSCode設定
            機能:
            - ESLint設定
            - フォーマット設定
            - コード補完設定
          dependency: []
      docs:
        API.md:
          content: |-
            API仕様書
            外部依存:
            - Supabase
            - OpenAI
            機能:
            - 認証API仕様
            - チャットAPI仕様
            - タスクAPI仕様
            - スケジュールAPI仕様
            - KPI API仕様
            - ファイル処理API仕様
          dependency: []
        ARCHITECTURE.md:
          content: |-
            アーキテクチャ設計書
            外部依存:
            - Mermaid
            機能:
            - システム概要
            - フロントエンド設計
            - バックエンド設計
            - AI処理設計
            - セキュリティ設計
          dependency: []
        CONTRIBUTING.md:
          content: |-
            コントリビューションガイド
            外部依存:
            - TypeScript
            - React
            - TailwindCSS
            機能:
            - 開発環境セットアップ手順
            - 開発ワークフロー
            - コーディング規約
            - レビュープロセス
          dependency: []
        DATABASE.md:
          content: |-
            データベース定義書
            外部依存:
            - PostgreSQL
            - Mermaid
            機能:
            - ER図
            - テーブル定義
            - インデックス定義
            - 制約定義
          dependency: []
        OPERATION_FLOW.md:
          content: |-
            操作フロー定義
            外部依存:
            - Mermaid
            機能:
            - チャットベースの操作フロー
            - サイドメニュー操作フロー
            - タスク管理フロー
            - スケジュール管理フロー
            - 事業計画管理フロー
          dependency: []
        REQUIREMENTS.md:
          content: |-
            要件定義書
            外部依存:
            - Next.js
            - TailwindCSS
            - Supabase
            - OpenAI API
            機能:
            - プロジェクト概要
            - 機能要件
            - 非機能要件
            - 技術要件
            - 開発フェーズ
            - 成功基準
          dependency: []
        REQUIREMENTS_CHECKLIST.md:
          content: |-
            要件定義チェックリスト
            機能:
            - プロジェクト基本情報チェック
            - 機能要件チェック
            - 非機能要件チェック
            - プロジェクト進行チェック
            - リスク確認
          dependency:
            - /docs/REQUIREMENTS.md
        SCREEN_DEFINITIONS.md:
          content: |-
            画面定義書
            外部依存:
            - ASCII Art
            - Mermaid
            機能:
            - 基本設計コンセプト
            - メイン画面設計
            - サイドドロワー設計
            - 事業計画管理画面設計
            - モバイル対応設計
          dependency: []
        develop-plan.md:
          content: |-
            COO前田くんAI実装計画書
            機能:
            - 開発フェーズ定義
            - 技術スタック定義
            - 品質管理計画
            - リスク管理
            - 成功基準
            - 保守運用計画
          dependency:
            - /docs/REQUIREMENTS_CHECKLIST.md
      frontend:
        app:
          (private):
            business-plans:
              [planId]:
                page.tsx:
                  content: |-
                    事業計画詳細ページ
                    外部依存:
                    - react
                    - next
                    機能:
                    - 事業計画詳細表示
                    - 進捗管理
                    - リソース管理
                  dependency: []
                reports:
                  page.tsx:
                    content: |-
                      事業計画レポートページ
                      外部依存:
                      - react
                      - next
                      機能:
                      - 進捗レポート
                      - KPI分析
                      - リスク分析
                    dependency: []
              page.tsx:
                content: |-
                  事業計画一覧ページ
                  外部依存:
                  - react
                  - next
                  機能:
                  - 事業計画一覧表示
                  - 新規作成
                  - フィルタリング
                dependency: []
            layout.tsx:
              content: |-
                プライベートレイアウト
                外部依存:
                - react
                - next
                - @/lib/supabase/server
                - next/navigation
                - @/components/ui/avatar
                - @/components/ui/button
                機能:
                - 認証チェック
                  - getUser()によるユーザー認証
                  - JWTトークンのサーバーサイド検証
                  - データベースからの最新ユーザー情報取得
                  - 未認証時のリダイレクト
                  - 認証状態の維持
                - ナビゲーション
                  - サイドバー表示
                    - メニュー管理
                    - 進捗表示
                    - ユーザー情報表示
                      - アバター画像
                      - メールアドレス
                    - サインアウトボタン
                - レイアウト管理
                  - グリッドレイアウト
                  - レスポンシブ対応
                  - 背景デザイン
              dependency:
                - /frontend/lib/supabase/server.ts
                - /frontend/components/ui/alert-dialog.tsx
                - /frontend/components/ui/button.tsx
                - /frontend/components/ui/progress.tsx
                - /frontend/components/ui/avatar.tsx
          api:
            schedules:
              analyze:
                route.ts:
                  content: |-
                    スケジュール分析API
                    外部依存:
                    - @/lib/auth
                    - @/lib/db
                    - next/server
                    - openai
                    機能:
                    - スケジュール分析
                    - コンテキスト理解
                    - 最適化提案
                  dependency:
                    - /frontend/lib/auth.ts
                    - /frontend/lib/db.ts
              natural-language:
                route.ts:
                  content: |-
                    自然言語処理API
                    外部依存:
                    - @/lib/auth
                    - @/lib/supabase/server
                    - next/server
                    - openai
                    機能:
                    - 認証チェック
                      - createClient()による認証クライアント取得
                      - getUser()による認証確認
                      - 未認証時の401エラー
                    - 自然言語からスケジュール生成
                    - 日時抽出
                    - 参加者抽出
                  dependency:
                    - /frontend/lib/supabase/server.ts
              schedule.ts:
                content: |-
                  スケジュールAPI
                  外部依存:
                  - axios
                  機能:
                  - スケジュールCRUD操作
                  - スケジュール分析
                  - 自然言語処理
                  - カレンダー同期
                dependency:
                  - /frontend/lib/db.ts
                  - /frontend/lib/openai.ts
          layout.tsx:
            content: |-
              ルートレイアウト
              外部依存:
              - next
              - react-big-calendar
              機能:
              - アプリケーションの基本レイアウト
              - グローバルスタイル
              - エラーハンドリング
            dependency:
              - /frontend/app/globals.css
          login:
            actions.ts:
              content: |-
                ログインアクション
                外部依存:
                - @/lib/supabase/server
                - next/cache
                - next/navigation
                機能:
                - ログイン処理
                - サインアップ処理
                - ソーシャルログイン
              dependency:
                - /frontend/lib/supabase/server.ts
            page.tsx:
              content: |-
                ログインページ
                外部依存:
                - react
                機能:
                - ログインフォーム
                - サインアップフォーム
                - ソーシャルログインボタン
              dependency:
                - /frontend/app/login/actions.ts
          page.tsx:
            content: |-
              ランディングページ（LP）
              外部依存:
              - react
              - next
              - @/lib/supabase/server
              機能:
              - 認証チェック
                - ログインユーザーのリダイレクト
              - LPコンテンツ
                - ヒーローセクション
                - 特徴紹介
                - CTA（Call To Action）
              - レスポンシブ対応
              - SEO最適化
            dependency:
              - /frontend/lib/supabase/server.ts
        components:
          chat:
            ChatInterface.tsx:
              content: |-
                チャットインターフェース
                外部依存:
                - react
                - lucide-react
                機能:
                - メッセージ表示
                - メッセージ送信
                - コンテキスト管理
                - ファイル添付
              dependency: []
          layout:
            MainLayout.tsx:
              content: |-
                メインレイアウト
                外部依存:
                - react
                機能:
                - ヘッダー表示
                - サイドドロワー制御
                - コンテンツ表示
                - レスポンシブ対応
              dependency:
                - /frontend/components/navigation/Header.tsx
                - /frontend/components/navigation/SideDrawer.tsx
          navigation:
            Header.tsx:
              content: |-
                ヘッダーコンポーネント
                外部依存:
                - react
                - lucide-react
                機能:
                - メニューボタン
                - 通知ボタン
                - プロフィール表示
              dependency: []
            SideDrawer.tsx:
              content: |-
                サイドドロワー
                外部依存:
                - react
                - framer-motion
                - lucide-react
                機能:
                - アニメーション付きドロワー
                - タスク一覧表示
                - KPIサマリー
                - スケジュール表示
              dependency:
                - /frontend/components/navigation/sidebar/KPISummary.tsx
                - /frontend/components/navigation/sidebar/Schedule.tsx
                - /frontend/components/navigation/sidebar/TaskList.tsx
          schedule:
            ScheduleManager.tsx:
              content: |-
                スケジュール管理コンポーネント
                外部依存:
                - react
                - sonner
                - @/hooks/schedule/useSchedule
                機能:
                - スケジュール一覧表示
                - スケジュール作成/編集/削除
                - カレンダー表示
                - 自然言語入力
                - エラーハンドリング
                  - ローディング状態表示
                  - エラーメッセージ表示
                - 型安全性
                  - 未使用変数は_プレフィックス
                  - Schedule型の厳密な使用
              dependency:
                - /frontend/hooks/schedule/useSchedule.ts
                - /frontend/features/schedule/types/Schedule.ts
              ScheduleList.tsx:
                content: |-
                  スケジュール一覧コンポーネント
                  外部依存:
                  - react
                  - date-fns
                  機能:
                  - 日付別グループ化表示
                  - スケジュール詳細モーダル
                  - アクセシビリティ対応
                    - buttonタグのtype属性
                    - キーボード操作
                  - 日本語対応
                    - date-fnsのjaロケール
                  - レスポンシブデザイン
                  - パフォーマンス最適化
                    - 配列のデフォルト値を定数化
                    - 不要なレンダリングの防止
                  - モダンなUIデザイン
                    - Tailwind CSSの最新記法
                    - bg-opacity → bg-black/50
                dependency:
                  - /frontend/features/schedule/types/Schedule.ts
          progress:
            components:
              ProgressTracker.tsx:
                content: |-
                  進捗管理コンポーネント
                  外部依存:
                  - react
                  - @/hooks/progress/useProgress
                  機能:
                  - マイルストーン管理
                  - タスク進捗管理
                  - リスク管理
                  - アラート管理
                  - レポート生成
                  - 型安全性
                    - ProgressReport型の使用
                    - 列挙型の文字列リテラル使用
                dependency:
                  - /frontend/features/progress/hooks/useProgress.ts
                  - /frontend/features/progress/types/index.ts
          ui:
            alert-dialog.tsx:
              content: |-
                アラートダイアログ
                外部依存:
                - react
                - shadcn/ui
                機能:
                - 確認ダイアログ
                - エラーダイアログ
                - 成功通知
              dependency: []
        features:
          business-plan:
            components:
              BottleneckAnalysis.tsx:
                content: |-
                  ボトルネック分析コンポーネント
                  外部依存:
                  - react
                  - recharts
                  機能:
                  - ボトルネック可視化
                  - 改善提案
                  - トレンド分析
                dependency: []
              PlanVsActual.tsx:
                content: |-
                  計画vs実績コンポーネント
                  外部依存:
                  - react
                  - recharts
                  機能:
                  - 計画と実績の比較
                  - 差異分析
                  - 予測表示
                dependency: []
              BusinessPlanAIAnalyzer.tsx:
                content: |-
                  事業計画AI分析コンポーネント
                  外部依存:
                  - react
                  - react-markdown
                  - remark-gfm
                  機能:
                  - チャットベースの対話
                  - マークダウン表示
                  - コンテキスト管理
                  - エラーハンドリング
                  - 型安全性
                    - Message型の厳密な使用
                    - keyの一意性確保
                dependency:
                  - /frontend/features/business-plan/types/BusinessPlan.ts
          schedule:
            api:
              schedule.ts:
                content: |-
                  スケジュールAPI
                  外部依存:
                  - axios
                  機能:
                  - スケジュールCRUD操作
                  - スケジュール分析
                  - 自然言語処理
                  - カレンダー同期
                dependency:
                  - /frontend/lib/db.ts
                  - /frontend/lib/openai.ts
        hooks:
          schedule:
            useSchedule.ts:
              content: |-
                スケジュールフック
                外部依存:
                - react
                - swr
                機能:
                - スケジュール状態管理
                - スケジュール操作
                - リアルタイム更新
                - キャッシュ管理
              dependency:
                - /frontend/features/schedule/api/schedule.ts
        lib:
          llm:
            config.ts:
              content: |-
                LLM設定
                外部依存:
                - openai
                機能:
                - OpenAI API設定
                  - 関数ベースの実装
                    - createOpenAIClient: クライアント初期化
                    - getOpenAIConfig: 設定取得
                    - handleOpenAIError: エラー処理
                  - シングルトンパターン
                    - クロージャによる状態管理
                    - サーバーサイド限定
                  - 型安全性
                    - OpenAIConfigType
                    - OpenAIError
                - エラーハンドリング設定
                  - API エラー
                  - レート制限
                  - トークン制限
                  - タイムアウト
              services:
                analyzer.ts:
                  content: |-
                    LLM分析サービス
                    外部依存:
                    - ./config
                    機能:
                    - プロンプト解析
                      - analyze: テキスト解析
                      - analyzeJSON: JSON解析
                    - 関数ベースAPI
                      - 純粋関数による実装
                      - 副作用の最小化
                      - 型安全性の確保
                    - エラーハンドリング
                      - OpenAIエラー処理
                      - JSON解析エラー処理
                chat.ts:
                  content: |-
                    チャットサービス
                    外部依存:
                    - ./config
                    - ./types
                    機能:
                    - メッセージ処理
                      - sendMessage: 通常送信
                      - sendMessageStream: ストリーミング送信
                    - 履歴管理
                      - イミュータブルな履歴更新
                      - ISO8601形式のタイムスタンプ
                    - 関数ベースAPI
                      - 純粋関数による実装
                      - 副作用の最小化
                      - 型安全性の確保
                types.ts:
                  content: |-
                    LLM型定義
                    機能:
                    - チャットメッセージ型
                      - role: ユーザー/アシスタント/システム
                      - content: メッセージ内容
                      - timestamp: ISO8601形式の文字列
                    - チャット履歴型
                      - messages: メッセージ配列
                      - metadata: オプショナルなメタデータ
                prompts:
                  business-plans.ts:
                    content: |-
                      事業計画プロンプト
                      機能:
                      - プロンプト生成
                        - generateBusinessPlanPrompt
                          - 分析プロンプト
                          - 改善プロンプト
                          - リスク分析プロンプト
                      - 関数ベースAPI
                        - 純粋関数による実装
                        - 型安全性の確保
              types.ts:
                content: |-
                  LLM型定義
                  機能:
                  - チャットメッセージ型
                    - role: ユーザー/アシスタント/システム
                    - content: メッセージ内容
                    - timestamp: ISO8601形式の文字列
                  - チャット履歴型
                    - messages: メッセージ配列
                    - metadata: オプショナルなメタデータ
          auth.ts:
            content: |-
              認証関連機能
              外部依存:
              - @supabase/supabase-js
              機能:
              - Supabase認証クライアント
              - ユーザー情報取得
                - getUser()による認証チェック
                - トークン管理
              - 権限管理
              - ソーシャルログイン
            dependency: []
          db.ts:
            content: |-
              データベース操作機能
              外部依存:
              - @supabase/supabase-js
              機能:
              - Supabaseクライアント
              - データCRUD操作
              - リアルタイム購読
              - RLS対応
            dependency: []
          openai.ts:
            content: |-
              OpenAI API設定
              外部依存:
              - openai
              機能:
              - OpenAIクライアント設定
              - プロンプト管理
              - コンテキスト管理
              - エラーハンドリング
            dependency: []
          supabase:
            server.ts:
              content: |-
                Supabaseサーバークライアント
                外部依存:
                - @supabase/ssr
                - next/headers
                機能:
                - Supabaseクライアント設定
                  - createClient関数の提供
                    - 共通の認証クライアント生成
                    - クッキー設定の一元管理
                      - 24時間有効期限
                      - base64エンコーディング対応
                      - セキュアCookie設定
                      - SameSite設定
                      - 暗号化対応
                    - トークン自動更新
                    - セッション永続化
                    - URLセッション検出
                  - エラーハンドリング
                    - クッキーパースエラー処理
                    - セッション無効時の処理
                    - トークン期限切れ処理
                dependency: []
            client.ts:
              content: |-
                Supabaseクライアント設定
                外部依存:
                - @supabase/ssr
                機能:
                - クライアント初期化
                - 環境変数管理
                  - Next.js推奨のprocess.env使用
                  - 型安全性の確保
                dependency:
                  - /frontend/.env
      supabase:
        migrations:
          20240101000000_create_schedules.sql:
            content: |-
              スケジュールテーブル作成
              外部依存:
              - PostgreSQL
              機能:
              - スケジュールテーブル定義
              - RLSポリシー設定
              - インデックス作成
              - 外部キー制約
            dependency: []
          20240101000003_add_is_deleted_to_business_plans.sql:
            content: |-
              事業計画論理削除対応
              外部依存:
              - PostgreSQL
              機能:
              - is_deleted カラム追加
              - インデックス作成
              - マイグレーション処理
            dependency: []
        middleware.ts:
          content: |-
            ミドルウェア
            外部依存:
            - next/server
            - @/lib/supabase/server
            機能:
            - 認証ミドルウェア
              - プライベートルート保護
                - /(private)配下のアクセス制御
                - 未認証時の/loginリダイレクト
              - ユーザー認証
                - auth.getUser()による認証チェック
                - エラーハンドリング
            - パス情報管理
              - x-pathnameヘッダー設定
              - リクエストヘッダー管理
              - レスポンスヘッダー管理
            - セッション管理
              - Supabaseセッション更新
          dependency:
            - /frontend/lib/supabase/server.ts
            - /frontend/lib/supabase/middleware.ts
        tailwind.config.ts:
          content: |-
            Tailwind設定ファイル
            外部依存:
            - tailwindcss
            - tailwindcss-animate
            機能:
            - コンテンツパス設定
              - components/**/*.{ts,tsx}
              - app/**/*.{ts,tsx}
              - features/**/*.{ts,tsx}
            - テーマ拡張
              - カスタムボーダー半径
              - カスタムカラー
                - background/foreground
                - card/popover
                - primary/secondary
                - muted/accent
                - destructive
                - border/input/ring
                - chart (1-5)
              - アニメーション
                - accordion-down
                - accordion-up
            - プラグイン
              - tailwindcss-animate (ESM形式)
            - ダークモード対応
          dependency:
            - /frontend/app/globals.css
